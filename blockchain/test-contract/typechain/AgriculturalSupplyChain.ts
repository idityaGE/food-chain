/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AgriculturalSupplyChain {
  export type TransactionStruct = {
    from: AddressLike;
    to: AddressLike;
    timestamp: BigNumberish;
    price: BigNumberish;
    transactionHash: string;
  };

  export type TransactionStructOutput = [
    from: string,
    to: string,
    timestamp: bigint,
    price: bigint,
    transactionHash: string
  ] & {
    from: string;
    to: string;
    timestamp: bigint;
    price: bigint;
    transactionHash: string;
  };
}

export interface AgriculturalSupplyChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "batchTransactions"
      | "createProductBatch"
      | "getBatchDetails"
      | "getBatchTransactions"
      | "getStakeholderBatches"
      | "getStakeholderDetails"
      | "isVerifiedStakeholder"
      | "nextBatchId"
      | "productBatches"
      | "registerStakeholder"
      | "stakeholderBatches"
      | "stakeholders"
      | "transferBatch"
      | "updateAdmin"
      | "updateProductStatus"
      | "verifyQuality"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProductBatchCreated"
      | "ProductStatusUpdated"
      | "ProductTransferred"
      | "QualityVerified"
      | "StakeholderRegistered"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchTransactions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProductBatch",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeholderBatches",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeholderDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedStakeholder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productBatches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStakeholder",
    values: [AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeholderBatches",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeholders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBatch",
    values: [BigNumberish, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQuality",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProductBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeholderBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeholderDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedStakeholder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStakeholder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeholderBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeholders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyQuality",
    data: BytesLike
  ): Result;
}

export namespace ProductBatchCreatedEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    farmer: AddressLike,
    productType: string
  ];
  export type OutputTuple = [
    batchId: bigint,
    farmer: string,
    productType: string
  ];
  export interface OutputObject {
    batchId: bigint;
    farmer: string;
    productType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductStatusUpdatedEvent {
  export type InputTuple = [batchId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [batchId: bigint, status: bigint];
  export interface OutputObject {
    batchId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductTransferredEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    batchId: bigint,
    from: string,
    to: string,
    price: bigint
  ];
  export interface OutputObject {
    batchId: bigint;
    from: string;
    to: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QualityVerifiedEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    grade: BigNumberish,
    verifier: AddressLike
  ];
  export type OutputTuple = [batchId: bigint, grade: bigint, verifier: string];
  export interface OutputObject {
    batchId: bigint;
    grade: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeholderRegisteredEvent {
  export type InputTuple = [stakeholder: AddressLike, role: BigNumberish];
  export type OutputTuple = [stakeholder: string, role: bigint];
  export interface OutputObject {
    stakeholder: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgriculturalSupplyChain extends BaseContract {
  connect(runner?: ContractRunner | null): AgriculturalSupplyChain;
  waitForDeployment(): Promise<this>;

  interface: AgriculturalSupplyChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  batchTransactions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        from: string;
        to: string;
        timestamp: bigint;
        price: bigint;
        transactionHash: string;
      }
    ],
    "view"
  >;

  createProductBatch: TypedContractMethod<
    [
      _productType: string,
      _quantity: BigNumberish,
      _harvestDate: BigNumberish,
      _expiryDate: BigNumberish,
      _basePrice: BigNumberish,
      _originHash: string,
      _qualityHash: string
    ],
    [bigint],
    "nonpayable"
  >;

  getBatchDetails: TypedContractMethod<
    [_batchId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        currentOwner: string;
        farmer: string;
        productType: string;
        quantity: bigint;
        harvestDate: bigint;
        expiryDate: bigint;
        status: bigint;
        qualityGrade: bigint;
        basePrice: bigint;
        originHash: string;
        qualityHash: string;
      }
    ],
    "view"
  >;

  getBatchTransactions: TypedContractMethod<
    [_batchId: BigNumberish],
    [AgriculturalSupplyChain.TransactionStructOutput[]],
    "view"
  >;

  getStakeholderBatches: TypedContractMethod<
    [_stakeholder: AddressLike],
    [bigint[]],
    "view"
  >;

  getStakeholderDetails: TypedContractMethod<
    [_stakeholder: AddressLike],
    [
      [bigint, string, boolean, bigint, string] & {
        role: bigint;
        name: string;
        isVerified: boolean;
        registrationTime: bigint;
        dataHash: string;
      }
    ],
    "view"
  >;

  isVerifiedStakeholder: TypedContractMethod<
    [_stakeholder: AddressLike],
    [boolean],
    "view"
  >;

  nextBatchId: TypedContractMethod<[], [bigint], "view">;

  productBatches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean
      ] & {
        batchId: bigint;
        currentOwner: string;
        farmer: string;
        productType: string;
        quantity: bigint;
        harvestDate: bigint;
        expiryDate: bigint;
        status: bigint;
        qualityGrade: bigint;
        basePrice: bigint;
        originHash: string;
        qualityHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  registerStakeholder: TypedContractMethod<
    [
      _stakeholderAddress: AddressLike,
      _role: BigNumberish,
      _name: string,
      _dataHash: string
    ],
    [void],
    "nonpayable"
  >;

  stakeholderBatches: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  stakeholders: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, boolean, bigint, string] & {
        stakeholderAddress: string;
        role: bigint;
        name: string;
        isVerified: boolean;
        registrationTime: bigint;
        dataHash: string;
      }
    ],
    "view"
  >;

  transferBatch: TypedContractMethod<
    [
      _batchId: BigNumberish,
      _to: AddressLike,
      _price: BigNumberish,
      _transactionHash: string
    ],
    [void],
    "payable"
  >;

  updateAdmin: TypedContractMethod<
    [_newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProductStatus: TypedContractMethod<
    [_batchId: BigNumberish, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyQuality: TypedContractMethod<
    [_batchId: BigNumberish, _grade: BigNumberish, _newQualityHash: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchTransactions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        from: string;
        to: string;
        timestamp: bigint;
        price: bigint;
        transactionHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createProductBatch"
  ): TypedContractMethod<
    [
      _productType: string,
      _quantity: BigNumberish,
      _harvestDate: BigNumberish,
      _expiryDate: BigNumberish,
      _basePrice: BigNumberish,
      _originHash: string,
      _qualityHash: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBatchDetails"
  ): TypedContractMethod<
    [_batchId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        currentOwner: string;
        farmer: string;
        productType: string;
        quantity: bigint;
        harvestDate: bigint;
        expiryDate: bigint;
        status: bigint;
        qualityGrade: bigint;
        basePrice: bigint;
        originHash: string;
        qualityHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchTransactions"
  ): TypedContractMethod<
    [_batchId: BigNumberish],
    [AgriculturalSupplyChain.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeholderBatches"
  ): TypedContractMethod<[_stakeholder: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getStakeholderDetails"
  ): TypedContractMethod<
    [_stakeholder: AddressLike],
    [
      [bigint, string, boolean, bigint, string] & {
        role: bigint;
        name: string;
        isVerified: boolean;
        registrationTime: bigint;
        dataHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifiedStakeholder"
  ): TypedContractMethod<[_stakeholder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextBatchId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "productBatches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean
      ] & {
        batchId: bigint;
        currentOwner: string;
        farmer: string;
        productType: string;
        quantity: bigint;
        harvestDate: bigint;
        expiryDate: bigint;
        status: bigint;
        qualityGrade: bigint;
        basePrice: bigint;
        originHash: string;
        qualityHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerStakeholder"
  ): TypedContractMethod<
    [
      _stakeholderAddress: AddressLike,
      _role: BigNumberish,
      _name: string,
      _dataHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeholderBatches"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeholders"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, boolean, bigint, string] & {
        stakeholderAddress: string;
        role: bigint;
        name: string;
        isVerified: boolean;
        registrationTime: bigint;
        dataHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferBatch"
  ): TypedContractMethod<
    [
      _batchId: BigNumberish,
      _to: AddressLike,
      _price: BigNumberish,
      _transactionHash: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateAdmin"
  ): TypedContractMethod<[_newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProductStatus"
  ): TypedContractMethod<
    [_batchId: BigNumberish, _status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyQuality"
  ): TypedContractMethod<
    [_batchId: BigNumberish, _grade: BigNumberish, _newQualityHash: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProductBatchCreated"
  ): TypedContractEvent<
    ProductBatchCreatedEvent.InputTuple,
    ProductBatchCreatedEvent.OutputTuple,
    ProductBatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductStatusUpdated"
  ): TypedContractEvent<
    ProductStatusUpdatedEvent.InputTuple,
    ProductStatusUpdatedEvent.OutputTuple,
    ProductStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductTransferred"
  ): TypedContractEvent<
    ProductTransferredEvent.InputTuple,
    ProductTransferredEvent.OutputTuple,
    ProductTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QualityVerified"
  ): TypedContractEvent<
    QualityVerifiedEvent.InputTuple,
    QualityVerifiedEvent.OutputTuple,
    QualityVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "StakeholderRegistered"
  ): TypedContractEvent<
    StakeholderRegisteredEvent.InputTuple,
    StakeholderRegisteredEvent.OutputTuple,
    StakeholderRegisteredEvent.OutputObject
  >;

  filters: {
    "ProductBatchCreated(uint256,address,string)": TypedContractEvent<
      ProductBatchCreatedEvent.InputTuple,
      ProductBatchCreatedEvent.OutputTuple,
      ProductBatchCreatedEvent.OutputObject
    >;
    ProductBatchCreated: TypedContractEvent<
      ProductBatchCreatedEvent.InputTuple,
      ProductBatchCreatedEvent.OutputTuple,
      ProductBatchCreatedEvent.OutputObject
    >;

    "ProductStatusUpdated(uint256,uint8)": TypedContractEvent<
      ProductStatusUpdatedEvent.InputTuple,
      ProductStatusUpdatedEvent.OutputTuple,
      ProductStatusUpdatedEvent.OutputObject
    >;
    ProductStatusUpdated: TypedContractEvent<
      ProductStatusUpdatedEvent.InputTuple,
      ProductStatusUpdatedEvent.OutputTuple,
      ProductStatusUpdatedEvent.OutputObject
    >;

    "ProductTransferred(uint256,address,address,uint256)": TypedContractEvent<
      ProductTransferredEvent.InputTuple,
      ProductTransferredEvent.OutputTuple,
      ProductTransferredEvent.OutputObject
    >;
    ProductTransferred: TypedContractEvent<
      ProductTransferredEvent.InputTuple,
      ProductTransferredEvent.OutputTuple,
      ProductTransferredEvent.OutputObject
    >;

    "QualityVerified(uint256,uint8,address)": TypedContractEvent<
      QualityVerifiedEvent.InputTuple,
      QualityVerifiedEvent.OutputTuple,
      QualityVerifiedEvent.OutputObject
    >;
    QualityVerified: TypedContractEvent<
      QualityVerifiedEvent.InputTuple,
      QualityVerifiedEvent.OutputTuple,
      QualityVerifiedEvent.OutputObject
    >;

    "StakeholderRegistered(address,uint8)": TypedContractEvent<
      StakeholderRegisteredEvent.InputTuple,
      StakeholderRegisteredEvent.OutputTuple,
      StakeholderRegisteredEvent.OutputObject
    >;
    StakeholderRegistered: TypedContractEvent<
      StakeholderRegisteredEvent.InputTuple,
      StakeholderRegisteredEvent.OutputTuple,
      StakeholderRegisteredEvent.OutputObject
    >;
  };
}
